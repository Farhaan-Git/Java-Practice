if(list1==null&&list2==null){
            return null;
        }
        else if(list2==null){
            return list2;
        }
        ListNode temp=null;
        ListNode temp1=list1;
        ListNode temp2=list2;
        while(temp1.next!=null&&temp2!=null){
                if(temp1.val == temp2.val){
                    // System.out.println("inside if");
                    temp=temp2;
                    temp2=temp2.next;
                    temp.next=temp1.next;
                    temp1.next=temp;
                    temp1=temp1.next.next;
                    // temp=null;
                    // EzhilTemp.printList(list1);
                }
                else if(temp1.val<temp2.val){
                    // System.out.println("inside else if(temp1.val < temp2.val)");
                        temp=temp1;
                        temp1=temp1.next;
                    // EzhilTemp.printList(list1);
                    
                }
                else if(temp1.val>temp2.val){
            // Hashset<Integer> hs= new HashSet<Integer>();
                
                    // System.out.println("inside else if(temp1.val > temp2.val)");
                    temp.next=temp2;
                    temp=temp2;
                    temp.next=temp1;
                    // temp=null;
                    temp1=temp1.next;
                    temp2=temp2.next;
                    // EzhilTemp.printList(list1);
                }
                temp=temp1;
        }
        if(temp2!=null){
            temp1=temp;
            while(temp2!=null){
                temp=temp2;
                temp2=temp2.next;
                temp1.next=temp;
                temp.next=null;
            }
        }
        return list1;







//second attempt


if(list1==null&&list2==null){
            return null;
        }
        else if(list2==null){
            return list2;
        }
       ListNode temp1=list1;
        ListNode temp2=list2;
        ListNode temp=null;
        ListNode prev=null;

        while(temp1!=null&&temp2!=null){
            if(temp1.next==null){
                prev=temp1;
                System.out.println("inside first if "+temp1.val);
                System.out.println("inside first if "+prev.val);
            }
            if(temp1.val==temp2.val){
                temp=temp2.next;
                temp2.next=temp1.next;
                temp1.next=temp2;
                temp1=temp1.next.next;
                temp2=temp;
            }
            else if(temp1.val<temp2.val){
                temp=temp1;
                temp1=temp1.next;
            }
            else if(temp1.val>temp2.val){
                System.out.println("inside second if");
                temp.next=temp2;
                temp=temp2.next;
                temp2.next=temp1;
                temp1=temp1.next;
            }
        }
        if(temp2!=null){
            System.out.println("inside third if 1 "+prev.val);
            System.out.println("inside third if 2 "+temp.val);
            prev.next=temp;
        }
        return list1;

change the code to <= and > because test case 4 is failing 


2 .add two numbers

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode ans= new ListNode();
        while(true){
            if(l1==null){
                break;
            }
            else if(l2==null){
                break;
            }
            else{
                // System.out.println(String.format("THis is carry: %d this is l1.val: %d this is l2.val: %d",carry,l1.val,l2.val));
                if(carry+l1.val+l2.val>9){
                    System.out.println("inside if");
                    carry=(carry+(l1.val+l2.val))%10;
                   Solution.insert(ans,new ListNode((carry+(l1.val+l2.val))/10));
                System.out.println(String.format("THis is carry: %d this is l1.val: %d this is l2.val: %d",carry,l1.val,l2.val));

                }
                else{
                    System.out.println("inside else");
                    Solution.insert(ans,new ListNode((carry+(l1.val+l2.val))/10));
                System.out.println(String.format("THis is carry: %d this is l1.val: %d this is l2.val: %d",carry,l1.val,l2.val));
                }
                l1=l1.next;
                l2=l2.next;
            }
        }
        return ans;
                
    }
    public static void insert(ListNode head,ListNode newNode){
        if(head==null){
            head=newNode;
            head.next=null;
        }
        else{
            while(head.next!=null){
                head=head.next;
            }
            head.next=newNode;
            newNode.next=null;
        }
    }
}
